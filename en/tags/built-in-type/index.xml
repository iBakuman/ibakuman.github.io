<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>built-in type on iBakuman&#39;s Blog</title>
        <link>https://ibakuman.github.io/en/tags/built-in-type/</link>
        <description>Recent content in built-in type on iBakuman&#39;s Blog</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <lastBuildDate>Thu, 29 Dec 2022 21:19:24 +0800</lastBuildDate><atom:link href="https://ibakuman.github.io/en/tags/built-in-type/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>Built-In Type Declarations in TypeScript</title>
        <link>https://ibakuman.github.io/en/posts/typescript/typescript-evolution/008-built-in-type-declarations-in-typescript/</link>
        <pubDate>Thu, 29 Dec 2022 21:19:24 +0800</pubDate>
        
        <guid>https://ibakuman.github.io/en/posts/typescript/typescript-evolution/008-built-in-type-declarations-in-typescript/</guid>
        <description>&lt;h2 id=&#34;overview&#34;&gt;Overview&lt;/h2&gt;
&lt;p&gt;TypeScript 2.0 gives you more &lt;span class=&#34;ibakuman-inline-translation&#34;&gt;granular&lt;sub&gt; {
颗粒的；粒状的 }&lt;/sub&gt;&lt;/span&gt; control over which built-in API declarations to include in your project. Previously, you were only able to access ES2015 APIs if your project was targeting &lt;code&gt;ES6&lt;/code&gt;. Now, the built-in standard library declarations have been modularized, and TypeScript allows you to pick and choose which type declarations to include.&lt;/p&gt;
&lt;h2 id=&#34;the---lib-compiler-option&#34;&gt;The &lt;code&gt;--lib&lt;/code&gt; Compiler Option&lt;/h2&gt;
&lt;p&gt;The type declarations for the JavaScript standard library have been &lt;span class=&#34;ibakuman-inline-translation&#34;&gt;partitioned&lt;sub&gt; { 分裂 }&lt;/sub&gt;&lt;/span&gt; into a bunch of API groups. At the time of writing in late November 2016, the following groups are defined:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;dom&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;webworker&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;es5&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;es6&lt;/code&gt; / &lt;code&gt;es2015&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;es2015.core&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;es2015.collection&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;es2015.iterable&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;es2015.promise&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;es2015.proxy&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;es2015.reflect&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;es2015.generator&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;es2015.symbol&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;es2015.symbol.wellknown&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;es2016&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;es2016.array.include&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;es2017&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;es2017.object&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;es2017.sharedmemory&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;scripthost&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You can pass any subset of the above groups to the TypeScript compiler via the &lt;code&gt;--lib&lt;/code&gt; command line option or the &lt;code&gt;lib&lt;/code&gt; property in your &lt;em&gt;tsconfig.json&lt;/em&gt;. TypeScript will then only inject the typings you specified; that is, it will treat all other API groups as non-existent in your environment.&lt;/p&gt;
&lt;p&gt;If you don&amp;rsquo;t explicitly provide the &lt;code&gt;lib&lt;/code&gt; option, TypeScript will implicitly inject a selection of API groups needed for web development. These are &lt;a class=&#34;link&#34; href=&#34;https://www.typescriptlang.org/docs/handbook/compiler-options.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;the defaults&lt;/a&gt;, depending on which language level your project targets:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;[&amp;quot;dom&amp;quot;, &amp;quot;es5&amp;quot;, &amp;quot;scripthost&amp;quot;]&lt;/code&gt; when targeting ES5&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[&amp;quot;dom&amp;quot;, &amp;quot;es6&amp;quot;, &amp;quot;dom.iterable&amp;quot;, &amp;quot;scripthost&amp;quot;]&lt;/code&gt; when targeting ES6&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;using-es2015-promises-in-a-typescript-project-targeting-es5&#34;&gt;Using ES2015 Promises in a TypeScript Project Targeting ES5&lt;/h2&gt;
&lt;p&gt;Let&amp;rsquo;s say you&amp;rsquo;re working on a web project that targets ES5 so that it runs in all major browsers. Your &lt;em&gt;tsconfig.json&lt;/em&gt; could look like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;8
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nt&#34;&gt;&amp;#34;compilerOptions&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nt&#34;&gt;&amp;#34;module&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;commonjs&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nt&#34;&gt;&amp;#34;target&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;es5&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nt&#34;&gt;&amp;#34;noImplicitAny&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nt&#34;&gt;&amp;#34;strictNullChecks&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;Since the &lt;code&gt;lib&lt;/code&gt; option is not specified, TypeScript will inject the API groups &lt;code&gt;&amp;quot;dom&amp;quot;&lt;/code&gt;, &lt;code&gt;&amp;quot;es5&amp;quot;&lt;/code&gt;, and &lt;code&gt;&amp;quot;scripthost&amp;quot;&lt;/code&gt; by default. Now let&amp;rsquo;s assume you want to use native ES2015 promises in your project. Those didn&amp;rsquo;t exist in ES5, so you need to install a polyfill to make your code run in older browsers as well:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;In web development, a polyfill (or polyfiller) is downloadable code which provides &lt;span class=&#34;ibakuman-inline-translation&#34;&gt;facilities&lt;sub&gt; {
设施；工具 }&lt;/sub&gt;&lt;/span&gt; that are not built into a web browser. For example, many features of HTML5 are not supported by versions of Internet Explorer older than version 8 or 9, but can be used by web pages if those pages install a polyfill.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;npm install --save es6-promise
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;You then import the polyfill in your application&amp;rsquo;s entry module:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-ts&#34; data-lang=&#34;ts&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kr&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;es6-promise&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// ...
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;With this polyfill in place, you can now use &lt;code&gt;Promise&lt;/code&gt; in your application, and your code will run just fine. However, TypeScript will give you a compile-time error saying that it &lt;code&gt;Cannot find the name &#39;Promise&#39;&lt;/code&gt;. That&amp;rsquo;s because the type declarations for &lt;code&gt;Promise&lt;/code&gt; aren&amp;rsquo;t included in any of the API groups injected:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://ibakuman.github.io/en/posts/typescript/typescript-evolution/008-built-in-type-declarations-in-typescript/assets/Missing_type_declaration_for_native_ES2015_promises.png&#34;
	width=&#34;714&#34;
	height=&#34;262&#34;
	srcset=&#34;https://ibakuman.github.io/en/posts/typescript/typescript-evolution/008-built-in-type-declarations-in-typescript/assets/Missing_type_declaration_for_native_ES2015_promises_hu4f175c83f862777d0395f34f60f67638_19139_480x0_resize_box_3.png 480w, https://ibakuman.github.io/en/posts/typescript/typescript-evolution/008-built-in-type-declarations-in-typescript/assets/Missing_type_declaration_for_native_ES2015_promises_hu4f175c83f862777d0395f34f60f67638_19139_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Missing type declaration for native ES2015 promises&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;272&#34;
		data-flex-basis=&#34;654px&#34;
	
&gt;
&lt;/p&gt;
&lt;p&gt;You have to let TypeScript know that (because of your polyfill) &lt;code&gt;Promise&lt;/code&gt; will exist at runtime. That&amp;rsquo;s where the &lt;code&gt;lib&lt;/code&gt; compiler option comes into play:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://ibakuman.github.io/en/posts/typescript/typescript-evolution/008-built-in-type-declarations-in-typescript/assets/API_groups_for_built-in_type_declarations.png&#34;
	width=&#34;1176&#34;
	height=&#34;982&#34;
	srcset=&#34;https://ibakuman.github.io/en/posts/typescript/typescript-evolution/008-built-in-type-declarations-in-typescript/assets/API_groups_for_built-in_type_declarations_huc2e96b5ff0cab83ad50fec2844ed3018_65784_480x0_resize_box_3.png 480w, https://ibakuman.github.io/en/posts/typescript/typescript-evolution/008-built-in-type-declarations-in-typescript/assets/API_groups_for_built-in_type_declarations_huc2e96b5ff0cab83ad50fec2844ed3018_65784_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;API groups for built-in type declarations&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;119&#34;
		data-flex-basis=&#34;287px&#34;
	
&gt;
&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;ibakuman-inline-note&#34;&gt;Note that you have to explicitly provide all API groups once you&amp;rsquo;re overriding the default&lt;/span&gt;. The resulting &lt;em&gt;tsconfig.json&lt;/em&gt; now looks like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;9
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nt&#34;&gt;&amp;#34;compilerOptions&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nt&#34;&gt;&amp;#34;module&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;commonjs&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nt&#34;&gt;&amp;#34;target&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;es5&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nt&#34;&gt;&amp;#34;noImplicitAny&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nt&#34;&gt;&amp;#34;strictNullChecks&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nt&#34;&gt;&amp;#34;lib&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;dom&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;es5&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;es2015.promise&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;And that&amp;rsquo;s it! Now, the type checker is happy:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://ibakuman.github.io/en/posts/typescript/typescript-evolution/008-built-in-type-declarations-in-typescript/assets/Using_native_ES2015_promises_in_TypeScript.png&#34;
	width=&#34;726&#34;
	height=&#34;268&#34;
	srcset=&#34;https://ibakuman.github.io/en/posts/typescript/typescript-evolution/008-built-in-type-declarations-in-typescript/assets/Using_native_ES2015_promises_in_TypeScript_hu64c76dd77a37b99492a7f238090638a4_19062_480x0_resize_box_3.png 480w, https://ibakuman.github.io/en/posts/typescript/typescript-evolution/008-built-in-type-declarations-in-typescript/assets/Using_native_ES2015_promises_in_TypeScript_hu64c76dd77a37b99492a7f238090638a4_19062_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Using native ES2015 promises in TypeScript&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;270&#34;
		data-flex-basis=&#34;650px&#34;
	
&gt;
&lt;/p&gt;
&lt;h2 id=&#34;references&#34;&gt;References&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://mariusschulz.com/blog/built-in-type-declarations-in-typescript&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Built-In Type Declarations in TypeScript — Marius Schulz&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        
    </channel>
</rss>
